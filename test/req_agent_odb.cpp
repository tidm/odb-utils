// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "req_agent_odb.hpp"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/oracle/traits.hxx>
#include <odb/oracle/database.hxx>
#include <odb/oracle/transaction.hxx>
#include <odb/oracle/connection.hxx>
#include <odb/oracle/statement.hxx>
#include <odb/oracle/statement-cache.hxx>
#include <odb/oracle/no-id-object-statements.hxx>
#include <odb/oracle/container-statements.hxx>
#include <odb/oracle/exceptions.hxx>
#include <odb/oracle/no-id-object-result.hxx>

namespace odb
{
  // ns2__reg_agent_obj
  //

  void access::object_traits_impl< ::ns2__reg_agent_obj, id_oracle >::
  bind (oracle::bind* b,
        image_type& i,
        oracle::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace oracle;

    std::size_t n (0);

    // tx_id
    //
    b[n].type = oracle::bind::number;
    b[n].buffer = i.tx_id_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.tx_id_value));
    b[n].size = &i.tx_id_size;
    b[n].indicator = &i.tx_id_indicator;
    n++;

    // tx_type
    //
    b[n].type = oracle::bind::uinteger;
    b[n].buffer = &i.tx_type_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.tx_type_indicator;
    n++;

    // hypertag_id
    //
    b[n].type = oracle::bind::number;
    b[n].buffer = i.hypertag_id_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.hypertag_id_value));
    b[n].size = &i.hypertag_id_size;
    b[n].indicator = &i.hypertag_id_indicator;
    n++;

    // bank_code
    //
    b[n].type = oracle::bind::uinteger;
    b[n].buffer = &i.bank_code_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.bank_code_indicator;
    n++;

    // agent_code
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.agent_code_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.agent_code_value));
    b[n].size = &i.agent_code_size;
    b[n].indicator = &i.agent_code_indicator;
    n++;

    // cif_id
    //
    b[n].type = oracle::bind::number;
    b[n].buffer = i.cif_id_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.cif_id_value));
    b[n].size = &i.cif_id_size;
    b[n].indicator = &i.cif_id_indicator;
    n++;

    // acc_id
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.acc_id_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.acc_id_value));
    b[n].size = &i.acc_id_size;
    b[n].indicator = &i.acc_id_indicator;
    n++;

    // acc_type
    //
    b[n].type = oracle::bind::uinteger;
    b[n].buffer = &i.acc_type_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.acc_type_indicator;
    n++;

    // net_operator
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.net_operator_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.net_operator_value));
    b[n].size = &i.net_operator_size;
    b[n].indicator = &i.net_operator_indicator;
    n++;

    // phone
    //
    b[n].type = oracle::bind::number;
    b[n].buffer = i.phone_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.phone_value));
    b[n].size = &i.phone_size;
    b[n].indicator = &i.phone_indicator;
    n++;

    // home_currency
    //
    b[n].type = oracle::bind::uinteger;
    b[n].buffer = &i.home_currency_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.home_currency_indicator;
    n++;

    // home_country
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.home_country_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.home_country_value));
    b[n].size = &i.home_country_size;
    b[n].indicator = &i.home_country_indicator;
    n++;

    // home_province
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.home_province_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.home_province_value));
    b[n].size = &i.home_province_size;
    b[n].indicator = &i.home_province_indicator;
    n++;

    // home_region
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.home_region_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.home_region_value));
    b[n].size = &i.home_region_size;
    b[n].indicator = &i.home_region_indicator;
    n++;

    // home_city
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.home_city_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.home_city_value));
    b[n].size = &i.home_city_size;
    b[n].indicator = &i.home_city_indicator;
    n++;

    // home_township
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.home_township_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.home_township_value));
    b[n].size = &i.home_township_size;
    b[n].indicator = &i.home_township_indicator;
    n++;

    // date_birth
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.date_birth_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.date_birth_value));
    b[n].size = &i.date_birth_size;
    b[n].indicator = &i.date_birth_indicator;
    n++;

    // id_type
    //
    b[n].type = oracle::bind::uinteger;
    b[n].buffer = &i.id_type_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.id_type_indicator;
    n++;

    // id_no
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.id_no_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.id_no_value));
    b[n].size = &i.id_no_size;
    b[n].indicator = &i.id_no_indicator;
    n++;

    // gender
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.gender_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.gender_value));
    b[n].size = &i.gender_size;
    b[n].indicator = &i.gender_indicator;
    n++;

    // occupation
    //
    b[n].type = oracle::bind::uinteger;
    b[n].buffer = &i.occupation_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.occupation_indicator;
    n++;

    // home_branch
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.home_branch_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.home_branch_value));
    b[n].size = &i.home_branch_size;
    b[n].indicator = &i.home_branch_indicator;
    n++;

    // service_plan
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.service_plan_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.service_plan_value));
    b[n].size = &i.service_plan_size;
    b[n].indicator = &i.service_plan_indicator;
    n++;

    // signup_loc
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.signup_loc_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.signup_loc_value));
    b[n].size = &i.signup_loc_size;
    b[n].indicator = &i.signup_loc_indicator;
    n++;

    // signup_date
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.signup_date_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.signup_date_value));
    b[n].size = &i.signup_date_size;
    b[n].indicator = &i.signup_date_indicator;
    n++;

    // magent_code
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.magent_code_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.magent_code_value));
    b[n].size = &i.magent_code_size;
    b[n].indicator = &i.magent_code_indicator;
    n++;

    // funder_acct_id
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.funder_acct_id_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.funder_acct_id_value));
    b[n].size = &i.funder_acct_id_size;
    b[n].indicator = &i.funder_acct_id_indicator;
    n++;
  }

  void access::object_traits_impl< ::ns2__reg_agent_obj, id_oracle >::
  init (image_type& i,
        const object_type& o,
        oracle::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace oracle;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    // tx_id
    //
    {
      ::uint64_t const& v =
        o.tx_id;

      bool is_null (false);
      std::size_t size (0);
      oracle::value_traits<
          ::uint64_t,
          oracle::id_big_int >::set_image (
        i.tx_id_value,
        size,
        is_null,
        v);
      i.tx_id_indicator = is_null ? -1 : 0;
      i.tx_id_size = static_cast<ub2> (size);
    }

    // tx_type
    //
    {
      ::uint16_t const& v =
        o.tx_type;

      bool is_null (false);
      oracle::value_traits<
          ::uint16_t,
          oracle::id_int32 >::set_image (
        i.tx_type_value, is_null, v);
      i.tx_type_indicator = is_null ? -1 : 0;
    }

    // hypertag_id
    //
    {
      ::uint64_t const& v =
        o.hypertag_id;

      bool is_null (false);
      std::size_t size (0);
      oracle::value_traits<
          ::uint64_t,
          oracle::id_big_int >::set_image (
        i.hypertag_id_value,
        size,
        is_null,
        v);
      i.hypertag_id_indicator = is_null ? -1 : 0;
      i.hypertag_id_size = static_cast<ub2> (size);
    }

    // bank_code
    //
    {
      ::uint32_t const& v =
        o.bank_code;

      bool is_null (false);
      oracle::value_traits<
          ::uint32_t,
          oracle::id_int32 >::set_image (
        i.bank_code_value, is_null, v);
      i.bank_code_indicator = is_null ? -1 : 0;
    }

    // agent_code
    //
    {
      ::std::string const& v =
        o.agent_code;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.agent_code_value,
        sizeof (i.agent_code_value),
        size,
        is_null,
        v);
      i.agent_code_indicator = is_null ? -1 : 0;
      i.agent_code_size = static_cast<ub2> (size);
    }

    // cif_id
    //
    {
      ::uint64_t const& v =
        o.cif_id;

      bool is_null (false);
      std::size_t size (0);
      oracle::value_traits<
          ::uint64_t,
          oracle::id_big_int >::set_image (
        i.cif_id_value,
        size,
        is_null,
        v);
      i.cif_id_indicator = is_null ? -1 : 0;
      i.cif_id_size = static_cast<ub2> (size);
    }

    // acc_id
    //
    {
      ::std::string const& v =
        o.acc_id;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.acc_id_value,
        sizeof (i.acc_id_value),
        size,
        is_null,
        v);
      i.acc_id_indicator = is_null ? -1 : 0;
      i.acc_id_size = static_cast<ub2> (size);
    }

    // acc_type
    //
    {
      ::uint8_t const& v =
        o.acc_type;

      bool is_null (false);
      oracle::value_traits<
          ::uint8_t,
          oracle::id_int32 >::set_image (
        i.acc_type_value, is_null, v);
      i.acc_type_indicator = is_null ? -1 : 0;
    }

    // net_operator
    //
    {
      ::std::string const& v =
        o.net_operator;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.net_operator_value,
        sizeof (i.net_operator_value),
        size,
        is_null,
        v);
      i.net_operator_indicator = is_null ? -1 : 0;
      i.net_operator_size = static_cast<ub2> (size);
    }

    // phone
    //
    {
      ::uint64_t const& v =
        o.phone;

      bool is_null (false);
      std::size_t size (0);
      oracle::value_traits<
          ::uint64_t,
          oracle::id_big_int >::set_image (
        i.phone_value,
        size,
        is_null,
        v);
      i.phone_indicator = is_null ? -1 : 0;
      i.phone_size = static_cast<ub2> (size);
    }

    // home_currency
    //
    {
      ::uint16_t const& v =
        o.home_currency;

      bool is_null (false);
      oracle::value_traits<
          ::uint16_t,
          oracle::id_int32 >::set_image (
        i.home_currency_value, is_null, v);
      i.home_currency_indicator = is_null ? -1 : 0;
    }

    // home_country
    //
    {
      ::std::string const& v =
        o.home_country;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.home_country_value,
        sizeof (i.home_country_value),
        size,
        is_null,
        v);
      i.home_country_indicator = is_null ? -1 : 0;
      i.home_country_size = static_cast<ub2> (size);
    }

    // home_province
    //
    {
      ::std::string const& v =
        o.home_province;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.home_province_value,
        sizeof (i.home_province_value),
        size,
        is_null,
        v);
      i.home_province_indicator = is_null ? -1 : 0;
      i.home_province_size = static_cast<ub2> (size);
    }

    // home_region
    //
    {
      ::std::string const& v =
        o.home_region;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.home_region_value,
        sizeof (i.home_region_value),
        size,
        is_null,
        v);
      i.home_region_indicator = is_null ? -1 : 0;
      i.home_region_size = static_cast<ub2> (size);
    }

    // home_city
    //
    {
      ::std::string const& v =
        o.home_city;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.home_city_value,
        sizeof (i.home_city_value),
        size,
        is_null,
        v);
      i.home_city_indicator = is_null ? -1 : 0;
      i.home_city_size = static_cast<ub2> (size);
    }

    // home_township
    //
    {
      ::std::string const& v =
        o.home_township;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.home_township_value,
        sizeof (i.home_township_value),
        size,
        is_null,
        v);
      i.home_township_indicator = is_null ? -1 : 0;
      i.home_township_size = static_cast<ub2> (size);
    }

    // date_birth
    //
    {
      ::std::string const& v =
        o.date_birth;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.date_birth_value,
        sizeof (i.date_birth_value),
        size,
        is_null,
        v);
      i.date_birth_indicator = is_null ? -1 : 0;
      i.date_birth_size = static_cast<ub2> (size);
    }

    // id_type
    //
    {
      ::uint8_t const& v =
        o.id_type;

      bool is_null (false);
      oracle::value_traits<
          ::uint8_t,
          oracle::id_int32 >::set_image (
        i.id_type_value, is_null, v);
      i.id_type_indicator = is_null ? -1 : 0;
    }

    // id_no
    //
    {
      ::std::string const& v =
        o.id_no;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.id_no_value,
        sizeof (i.id_no_value),
        size,
        is_null,
        v);
      i.id_no_indicator = is_null ? -1 : 0;
      i.id_no_size = static_cast<ub2> (size);
    }

    // gender
    //
    {
      ::std::string const& v =
        o.gender;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.gender_value,
        sizeof (i.gender_value),
        size,
        is_null,
        v);
      i.gender_indicator = is_null ? -1 : 0;
      i.gender_size = static_cast<ub2> (size);
    }

    // occupation
    //
    {
      ::uint8_t const& v =
        o.occupation;

      bool is_null (false);
      oracle::value_traits<
          ::uint8_t,
          oracle::id_int32 >::set_image (
        i.occupation_value, is_null, v);
      i.occupation_indicator = is_null ? -1 : 0;
    }

    // home_branch
    //
    {
      ::std::string const& v =
        o.home_branch;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.home_branch_value,
        sizeof (i.home_branch_value),
        size,
        is_null,
        v);
      i.home_branch_indicator = is_null ? -1 : 0;
      i.home_branch_size = static_cast<ub2> (size);
    }

    // service_plan
    //
    {
      ::std::string const& v =
        o.service_plan;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.service_plan_value,
        sizeof (i.service_plan_value),
        size,
        is_null,
        v);
      i.service_plan_indicator = is_null ? -1 : 0;
      i.service_plan_size = static_cast<ub2> (size);
    }

    // signup_loc
    //
    {
      ::std::string const& v =
        o.signup_loc;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.signup_loc_value,
        sizeof (i.signup_loc_value),
        size,
        is_null,
        v);
      i.signup_loc_indicator = is_null ? -1 : 0;
      i.signup_loc_size = static_cast<ub2> (size);
    }

    // signup_date
    //
    {
      ::std::string const& v =
        o.signup_date;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.signup_date_value,
        sizeof (i.signup_date_value),
        size,
        is_null,
        v);
      i.signup_date_indicator = is_null ? -1 : 0;
      i.signup_date_size = static_cast<ub2> (size);
    }

    // magent_code
    //
    {
      ::std::string const& v =
        o.magent_code;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.magent_code_value,
        sizeof (i.magent_code_value),
        size,
        is_null,
        v);
      i.magent_code_indicator = is_null ? -1 : 0;
      i.magent_code_size = static_cast<ub2> (size);
    }

    // funder_acct_id
    //
    {
      ::std::string const& v =
        o.funder_acct_id;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.funder_acct_id_value,
        sizeof (i.funder_acct_id_value),
        size,
        is_null,
        v);
      i.funder_acct_id_indicator = is_null ? -1 : 0;
      i.funder_acct_id_size = static_cast<ub2> (size);
    }
  }

  void access::object_traits_impl< ::ns2__reg_agent_obj, id_oracle >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // tx_id
    //
    {
      ::uint64_t& v =
        o.tx_id;

      oracle::value_traits<
          ::uint64_t,
          oracle::id_big_int >::set_value (
        v,
        i.tx_id_value,
        i.tx_id_size,
        i.tx_id_indicator == -1);
    }

    // tx_type
    //
    {
      ::uint16_t& v =
        o.tx_type;

      oracle::value_traits<
          ::uint16_t,
          oracle::id_int32 >::set_value (
        v,
        i.tx_type_value,
        i.tx_type_indicator == -1);
    }

    // hypertag_id
    //
    {
      ::uint64_t& v =
        o.hypertag_id;

      oracle::value_traits<
          ::uint64_t,
          oracle::id_big_int >::set_value (
        v,
        i.hypertag_id_value,
        i.hypertag_id_size,
        i.hypertag_id_indicator == -1);
    }

    // bank_code
    //
    {
      ::uint32_t& v =
        o.bank_code;

      oracle::value_traits<
          ::uint32_t,
          oracle::id_int32 >::set_value (
        v,
        i.bank_code_value,
        i.bank_code_indicator == -1);
    }

    // agent_code
    //
    {
      ::std::string& v =
        o.agent_code;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.agent_code_value,
        i.agent_code_size,
        i.agent_code_indicator == -1);
    }

    // cif_id
    //
    {
      ::uint64_t& v =
        o.cif_id;

      oracle::value_traits<
          ::uint64_t,
          oracle::id_big_int >::set_value (
        v,
        i.cif_id_value,
        i.cif_id_size,
        i.cif_id_indicator == -1);
    }

    // acc_id
    //
    {
      ::std::string& v =
        o.acc_id;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.acc_id_value,
        i.acc_id_size,
        i.acc_id_indicator == -1);
    }

    // acc_type
    //
    {
      ::uint8_t& v =
        o.acc_type;

      oracle::value_traits<
          ::uint8_t,
          oracle::id_int32 >::set_value (
        v,
        i.acc_type_value,
        i.acc_type_indicator == -1);
    }

    // net_operator
    //
    {
      ::std::string& v =
        o.net_operator;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.net_operator_value,
        i.net_operator_size,
        i.net_operator_indicator == -1);
    }

    // phone
    //
    {
      ::uint64_t& v =
        o.phone;

      oracle::value_traits<
          ::uint64_t,
          oracle::id_big_int >::set_value (
        v,
        i.phone_value,
        i.phone_size,
        i.phone_indicator == -1);
    }

    // home_currency
    //
    {
      ::uint16_t& v =
        o.home_currency;

      oracle::value_traits<
          ::uint16_t,
          oracle::id_int32 >::set_value (
        v,
        i.home_currency_value,
        i.home_currency_indicator == -1);
    }

    // home_country
    //
    {
      ::std::string& v =
        o.home_country;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.home_country_value,
        i.home_country_size,
        i.home_country_indicator == -1);
    }

    // home_province
    //
    {
      ::std::string& v =
        o.home_province;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.home_province_value,
        i.home_province_size,
        i.home_province_indicator == -1);
    }

    // home_region
    //
    {
      ::std::string& v =
        o.home_region;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.home_region_value,
        i.home_region_size,
        i.home_region_indicator == -1);
    }

    // home_city
    //
    {
      ::std::string& v =
        o.home_city;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.home_city_value,
        i.home_city_size,
        i.home_city_indicator == -1);
    }

    // home_township
    //
    {
      ::std::string& v =
        o.home_township;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.home_township_value,
        i.home_township_size,
        i.home_township_indicator == -1);
    }

    // date_birth
    //
    {
      ::std::string& v =
        o.date_birth;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.date_birth_value,
        i.date_birth_size,
        i.date_birth_indicator == -1);
    }

    // id_type
    //
    {
      ::uint8_t& v =
        o.id_type;

      oracle::value_traits<
          ::uint8_t,
          oracle::id_int32 >::set_value (
        v,
        i.id_type_value,
        i.id_type_indicator == -1);
    }

    // id_no
    //
    {
      ::std::string& v =
        o.id_no;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.id_no_value,
        i.id_no_size,
        i.id_no_indicator == -1);
    }

    // gender
    //
    {
      ::std::string& v =
        o.gender;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.gender_value,
        i.gender_size,
        i.gender_indicator == -1);
    }

    // occupation
    //
    {
      ::uint8_t& v =
        o.occupation;

      oracle::value_traits<
          ::uint8_t,
          oracle::id_int32 >::set_value (
        v,
        i.occupation_value,
        i.occupation_indicator == -1);
    }

    // home_branch
    //
    {
      ::std::string& v =
        o.home_branch;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.home_branch_value,
        i.home_branch_size,
        i.home_branch_indicator == -1);
    }

    // service_plan
    //
    {
      ::std::string& v =
        o.service_plan;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.service_plan_value,
        i.service_plan_size,
        i.service_plan_indicator == -1);
    }

    // signup_loc
    //
    {
      ::std::string& v =
        o.signup_loc;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.signup_loc_value,
        i.signup_loc_size,
        i.signup_loc_indicator == -1);
    }

    // signup_date
    //
    {
      ::std::string& v =
        o.signup_date;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.signup_date_value,
        i.signup_date_size,
        i.signup_date_indicator == -1);
    }

    // magent_code
    //
    {
      ::std::string& v =
        o.magent_code;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.magent_code_value,
        i.magent_code_size,
        i.magent_code_indicator == -1);
    }

    // funder_acct_id
    //
    {
      ::std::string& v =
        o.funder_acct_id;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.funder_acct_id_value,
        i.funder_acct_id_size,
        i.funder_acct_id_indicator == -1);
    }
  }

  const char access::object_traits_impl< ::ns2__reg_agent_obj, id_oracle >::persist_statement[] =
  "INSERT INTO \"ns2__reg_agent_obj\" "
  "(\"tx_id\", "
  "\"tx_type\", "
  "\"hypertag_id\", "
  "\"bank_code\", "
  "\"agent_code\", "
  "\"cif_id\", "
  "\"acc_id\", "
  "\"acc_type\", "
  "\"net_operator\", "
  "\"phone\", "
  "\"home_currency\", "
  "\"home_country\", "
  "\"home_province\", "
  "\"home_region\", "
  "\"home_city\", "
  "\"home_township\", "
  "\"date_birth\", "
  "\"id_type\", "
  "\"id_no\", "
  "\"gender\", "
  "\"occupation\", "
  "\"home_branch\", "
  "\"service_plan\", "
  "\"signup_loc\", "
  "\"signup_date\", "
  "\"magent_code\", "
  "\"funder_acct_id\") "
  "VALUES "
  "(:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13, :14, :15, :16, :17, :18, :19, :20, :21, :22, :23, :24, :25, :26, :27)";

  const char access::object_traits_impl< ::ns2__reg_agent_obj, id_oracle >::query_statement[] =
  "SELECT "
  "\"ns2__reg_agent_obj\".\"tx_id\", "
  "\"ns2__reg_agent_obj\".\"tx_type\", "
  "\"ns2__reg_agent_obj\".\"hypertag_id\", "
  "\"ns2__reg_agent_obj\".\"bank_code\", "
  "\"ns2__reg_agent_obj\".\"agent_code\", "
  "\"ns2__reg_agent_obj\".\"cif_id\", "
  "\"ns2__reg_agent_obj\".\"acc_id\", "
  "\"ns2__reg_agent_obj\".\"acc_type\", "
  "\"ns2__reg_agent_obj\".\"net_operator\", "
  "\"ns2__reg_agent_obj\".\"phone\", "
  "\"ns2__reg_agent_obj\".\"home_currency\", "
  "\"ns2__reg_agent_obj\".\"home_country\", "
  "\"ns2__reg_agent_obj\".\"home_province\", "
  "\"ns2__reg_agent_obj\".\"home_region\", "
  "\"ns2__reg_agent_obj\".\"home_city\", "
  "\"ns2__reg_agent_obj\".\"home_township\", "
  "\"ns2__reg_agent_obj\".\"date_birth\", "
  "\"ns2__reg_agent_obj\".\"id_type\", "
  "\"ns2__reg_agent_obj\".\"id_no\", "
  "\"ns2__reg_agent_obj\".\"gender\", "
  "\"ns2__reg_agent_obj\".\"occupation\", "
  "\"ns2__reg_agent_obj\".\"home_branch\", "
  "\"ns2__reg_agent_obj\".\"service_plan\", "
  "\"ns2__reg_agent_obj\".\"signup_loc\", "
  "\"ns2__reg_agent_obj\".\"signup_date\", "
  "\"ns2__reg_agent_obj\".\"magent_code\", "
  "\"ns2__reg_agent_obj\".\"funder_acct_id\" "
  "FROM \"ns2__reg_agent_obj\"";

  const char access::object_traits_impl< ::ns2__reg_agent_obj, id_oracle >::erase_query_statement[] =
  "DELETE FROM \"ns2__reg_agent_obj\"";

  const char access::object_traits_impl< ::ns2__reg_agent_obj, id_oracle >::table_name[] =
  "\"ns2__reg_agent_obj\"";

  void access::object_traits_impl< ::ns2__reg_agent_obj, id_oracle >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace oracle;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  result< access::object_traits_impl< ::ns2__reg_agent_obj, id_oracle >::object_type >
  access::object_traits_impl< ::ns2__reg_agent_obj, id_oracle >::
  query (database&, const query_base_type& q)
  {
    using namespace oracle;
    using odb::details::shared;
    using odb::details::shared_ptr;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::no_id_object_result_impl<object_type> > r (
      new (shared) oracle::no_id_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ns2__reg_agent_obj, id_oracle >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace oracle;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }

  // ns2__reg_customer_obj
  //

  void access::object_traits_impl< ::ns2__reg_customer_obj, id_oracle >::
  bind (oracle::bind* b,
        image_type& i,
        oracle::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace oracle;

    std::size_t n (0);

    // tx_id
    //
    b[n].type = oracle::bind::number;
    b[n].buffer = i.tx_id_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.tx_id_value));
    b[n].size = &i.tx_id_size;
    b[n].indicator = &i.tx_id_indicator;
    n++;

    // tx_type
    //
    b[n].type = oracle::bind::uinteger;
    b[n].buffer = &i.tx_type_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.tx_type_indicator;
    n++;

    // hypertag_id
    //
    b[n].type = oracle::bind::number;
    b[n].buffer = i.hypertag_id_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.hypertag_id_value));
    b[n].size = &i.hypertag_id_size;
    b[n].indicator = &i.hypertag_id_indicator;
    n++;

    // bank_code
    //
    b[n].type = oracle::bind::uinteger;
    b[n].buffer = &i.bank_code_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.bank_code_indicator;
    n++;

    // cif_id
    //
    b[n].type = oracle::bind::number;
    b[n].buffer = i.cif_id_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.cif_id_value));
    b[n].size = &i.cif_id_size;
    b[n].indicator = &i.cif_id_indicator;
    n++;

    // acc_id
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.acc_id_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.acc_id_value));
    b[n].size = &i.acc_id_size;
    b[n].indicator = &i.acc_id_indicator;
    n++;

    // acc_type
    //
    b[n].type = oracle::bind::uinteger;
    b[n].buffer = &i.acc_type_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.acc_type_indicator;
    n++;

    // net_operator
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.net_operator_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.net_operator_value));
    b[n].size = &i.net_operator_size;
    b[n].indicator = &i.net_operator_indicator;
    n++;

    // phone
    //
    b[n].type = oracle::bind::number;
    b[n].buffer = i.phone_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.phone_value));
    b[n].size = &i.phone_size;
    b[n].indicator = &i.phone_indicator;
    n++;

    // home_currency
    //
    b[n].type = oracle::bind::uinteger;
    b[n].buffer = &i.home_currency_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.home_currency_indicator;
    n++;

    // home_country
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.home_country_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.home_country_value));
    b[n].size = &i.home_country_size;
    b[n].indicator = &i.home_country_indicator;
    n++;

    // home_province
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.home_province_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.home_province_value));
    b[n].size = &i.home_province_size;
    b[n].indicator = &i.home_province_indicator;
    n++;

    // home_region
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.home_region_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.home_region_value));
    b[n].size = &i.home_region_size;
    b[n].indicator = &i.home_region_indicator;
    n++;

    // home_city
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.home_city_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.home_city_value));
    b[n].size = &i.home_city_size;
    b[n].indicator = &i.home_city_indicator;
    n++;

    // home_township
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.home_township_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.home_township_value));
    b[n].size = &i.home_township_size;
    b[n].indicator = &i.home_township_indicator;
    n++;

    // date_birth
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.date_birth_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.date_birth_value));
    b[n].size = &i.date_birth_size;
    b[n].indicator = &i.date_birth_indicator;
    n++;

    // id_type
    //
    b[n].type = oracle::bind::uinteger;
    b[n].buffer = &i.id_type_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.id_type_indicator;
    n++;

    // id_no
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.id_no_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.id_no_value));
    b[n].size = &i.id_no_size;
    b[n].indicator = &i.id_no_indicator;
    n++;

    // gender
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.gender_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.gender_value));
    b[n].size = &i.gender_size;
    b[n].indicator = &i.gender_indicator;
    n++;

    // occupation
    //
    b[n].type = oracle::bind::uinteger;
    b[n].buffer = &i.occupation_value;
    b[n].capacity = 4;
    b[n].size = 0;
    b[n].indicator = &i.occupation_indicator;
    n++;

    // home_branch
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.home_branch_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.home_branch_value));
    b[n].size = &i.home_branch_size;
    b[n].indicator = &i.home_branch_indicator;
    n++;

    // service_plan
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.service_plan_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.service_plan_value));
    b[n].size = &i.service_plan_size;
    b[n].indicator = &i.service_plan_indicator;
    n++;

    // signup_loc
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.signup_loc_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.signup_loc_value));
    b[n].size = &i.signup_loc_size;
    b[n].indicator = &i.signup_loc_indicator;
    n++;

    // signup_date
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.signup_date_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.signup_date_value));
    b[n].size = &i.signup_date_size;
    b[n].indicator = &i.signup_date_indicator;
    n++;

    // agent_code
    //
    b[n].type = oracle::bind::string;
    b[n].buffer = i.agent_code_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.agent_code_value));
    b[n].size = &i.agent_code_size;
    b[n].indicator = &i.agent_code_indicator;
    n++;

    // initial_deposit
    //
    b[n].type = oracle::bind::number;
    b[n].buffer = i.initial_deposit_value;
    b[n].capacity = static_cast<ub4> (sizeof (i.initial_deposit_value));
    b[n].size = &i.initial_deposit_size;
    b[n].indicator = &i.initial_deposit_indicator;
    n++;
  }

  void access::object_traits_impl< ::ns2__reg_customer_obj, id_oracle >::
  init (image_type& i,
        const object_type& o,
        oracle::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace oracle;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    // tx_id
    //
    {
      ::uint64_t const& v =
        o.tx_id;

      bool is_null (false);
      std::size_t size (0);
      oracle::value_traits<
          ::uint64_t,
          oracle::id_big_int >::set_image (
        i.tx_id_value,
        size,
        is_null,
        v);
      i.tx_id_indicator = is_null ? -1 : 0;
      i.tx_id_size = static_cast<ub2> (size);
    }

    // tx_type
    //
    {
      ::uint16_t const& v =
        o.tx_type;

      bool is_null (false);
      oracle::value_traits<
          ::uint16_t,
          oracle::id_int32 >::set_image (
        i.tx_type_value, is_null, v);
      i.tx_type_indicator = is_null ? -1 : 0;
    }

    // hypertag_id
    //
    {
      ::uint64_t const& v =
        o.hypertag_id;

      bool is_null (false);
      std::size_t size (0);
      oracle::value_traits<
          ::uint64_t,
          oracle::id_big_int >::set_image (
        i.hypertag_id_value,
        size,
        is_null,
        v);
      i.hypertag_id_indicator = is_null ? -1 : 0;
      i.hypertag_id_size = static_cast<ub2> (size);
    }

    // bank_code
    //
    {
      ::uint32_t const& v =
        o.bank_code;

      bool is_null (false);
      oracle::value_traits<
          ::uint32_t,
          oracle::id_int32 >::set_image (
        i.bank_code_value, is_null, v);
      i.bank_code_indicator = is_null ? -1 : 0;
    }

    // cif_id
    //
    {
      ::uint64_t const& v =
        o.cif_id;

      bool is_null (false);
      std::size_t size (0);
      oracle::value_traits<
          ::uint64_t,
          oracle::id_big_int >::set_image (
        i.cif_id_value,
        size,
        is_null,
        v);
      i.cif_id_indicator = is_null ? -1 : 0;
      i.cif_id_size = static_cast<ub2> (size);
    }

    // acc_id
    //
    {
      ::std::string const& v =
        o.acc_id;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.acc_id_value,
        sizeof (i.acc_id_value),
        size,
        is_null,
        v);
      i.acc_id_indicator = is_null ? -1 : 0;
      i.acc_id_size = static_cast<ub2> (size);
    }

    // acc_type
    //
    {
      ::uint8_t const& v =
        o.acc_type;

      bool is_null (false);
      oracle::value_traits<
          ::uint8_t,
          oracle::id_int32 >::set_image (
        i.acc_type_value, is_null, v);
      i.acc_type_indicator = is_null ? -1 : 0;
    }

    // net_operator
    //
    {
      ::std::string const& v =
        o.net_operator;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.net_operator_value,
        sizeof (i.net_operator_value),
        size,
        is_null,
        v);
      i.net_operator_indicator = is_null ? -1 : 0;
      i.net_operator_size = static_cast<ub2> (size);
    }

    // phone
    //
    {
      ::uint64_t const& v =
        o.phone;

      bool is_null (false);
      std::size_t size (0);
      oracle::value_traits<
          ::uint64_t,
          oracle::id_big_int >::set_image (
        i.phone_value,
        size,
        is_null,
        v);
      i.phone_indicator = is_null ? -1 : 0;
      i.phone_size = static_cast<ub2> (size);
    }

    // home_currency
    //
    {
      ::uint16_t const& v =
        o.home_currency;

      bool is_null (false);
      oracle::value_traits<
          ::uint16_t,
          oracle::id_int32 >::set_image (
        i.home_currency_value, is_null, v);
      i.home_currency_indicator = is_null ? -1 : 0;
    }

    // home_country
    //
    {
      ::std::string const& v =
        o.home_country;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.home_country_value,
        sizeof (i.home_country_value),
        size,
        is_null,
        v);
      i.home_country_indicator = is_null ? -1 : 0;
      i.home_country_size = static_cast<ub2> (size);
    }

    // home_province
    //
    {
      ::std::string const& v =
        o.home_province;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.home_province_value,
        sizeof (i.home_province_value),
        size,
        is_null,
        v);
      i.home_province_indicator = is_null ? -1 : 0;
      i.home_province_size = static_cast<ub2> (size);
    }

    // home_region
    //
    {
      ::std::string const& v =
        o.home_region;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.home_region_value,
        sizeof (i.home_region_value),
        size,
        is_null,
        v);
      i.home_region_indicator = is_null ? -1 : 0;
      i.home_region_size = static_cast<ub2> (size);
    }

    // home_city
    //
    {
      ::std::string const& v =
        o.home_city;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.home_city_value,
        sizeof (i.home_city_value),
        size,
        is_null,
        v);
      i.home_city_indicator = is_null ? -1 : 0;
      i.home_city_size = static_cast<ub2> (size);
    }

    // home_township
    //
    {
      ::std::string const& v =
        o.home_township;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.home_township_value,
        sizeof (i.home_township_value),
        size,
        is_null,
        v);
      i.home_township_indicator = is_null ? -1 : 0;
      i.home_township_size = static_cast<ub2> (size);
    }

    // date_birth
    //
    {
      ::std::string const& v =
        o.date_birth;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.date_birth_value,
        sizeof (i.date_birth_value),
        size,
        is_null,
        v);
      i.date_birth_indicator = is_null ? -1 : 0;
      i.date_birth_size = static_cast<ub2> (size);
    }

    // id_type
    //
    {
      ::uint8_t const& v =
        o.id_type;

      bool is_null (false);
      oracle::value_traits<
          ::uint8_t,
          oracle::id_int32 >::set_image (
        i.id_type_value, is_null, v);
      i.id_type_indicator = is_null ? -1 : 0;
    }

    // id_no
    //
    {
      ::std::string const& v =
        o.id_no;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.id_no_value,
        sizeof (i.id_no_value),
        size,
        is_null,
        v);
      i.id_no_indicator = is_null ? -1 : 0;
      i.id_no_size = static_cast<ub2> (size);
    }

    // gender
    //
    {
      ::std::string const& v =
        o.gender;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.gender_value,
        sizeof (i.gender_value),
        size,
        is_null,
        v);
      i.gender_indicator = is_null ? -1 : 0;
      i.gender_size = static_cast<ub2> (size);
    }

    // occupation
    //
    {
      ::uint8_t const& v =
        o.occupation;

      bool is_null (false);
      oracle::value_traits<
          ::uint8_t,
          oracle::id_int32 >::set_image (
        i.occupation_value, is_null, v);
      i.occupation_indicator = is_null ? -1 : 0;
    }

    // home_branch
    //
    {
      ::std::string const& v =
        o.home_branch;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.home_branch_value,
        sizeof (i.home_branch_value),
        size,
        is_null,
        v);
      i.home_branch_indicator = is_null ? -1 : 0;
      i.home_branch_size = static_cast<ub2> (size);
    }

    // service_plan
    //
    {
      ::std::string const& v =
        o.service_plan;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.service_plan_value,
        sizeof (i.service_plan_value),
        size,
        is_null,
        v);
      i.service_plan_indicator = is_null ? -1 : 0;
      i.service_plan_size = static_cast<ub2> (size);
    }

    // signup_loc
    //
    {
      ::std::string const& v =
        o.signup_loc;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.signup_loc_value,
        sizeof (i.signup_loc_value),
        size,
        is_null,
        v);
      i.signup_loc_indicator = is_null ? -1 : 0;
      i.signup_loc_size = static_cast<ub2> (size);
    }

    // signup_date
    //
    {
      ::std::string const& v =
        o.signup_date;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.signup_date_value,
        sizeof (i.signup_date_value),
        size,
        is_null,
        v);
      i.signup_date_indicator = is_null ? -1 : 0;
      i.signup_date_size = static_cast<ub2> (size);
    }

    // agent_code
    //
    {
      ::std::string const& v =
        o.agent_code;

      bool is_null (true);
      std::size_t size (0);
      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_image (
        i.agent_code_value,
        sizeof (i.agent_code_value),
        size,
        is_null,
        v);
      i.agent_code_indicator = is_null ? -1 : 0;
      i.agent_code_size = static_cast<ub2> (size);
    }

    // initial_deposit
    //
    {
      ::uint64_t const& v =
        o.initial_deposit;

      bool is_null (false);
      std::size_t size (0);
      oracle::value_traits<
          ::uint64_t,
          oracle::id_big_int >::set_image (
        i.initial_deposit_value,
        size,
        is_null,
        v);
      i.initial_deposit_indicator = is_null ? -1 : 0;
      i.initial_deposit_size = static_cast<ub2> (size);
    }
  }

  void access::object_traits_impl< ::ns2__reg_customer_obj, id_oracle >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // tx_id
    //
    {
      ::uint64_t& v =
        o.tx_id;

      oracle::value_traits<
          ::uint64_t,
          oracle::id_big_int >::set_value (
        v,
        i.tx_id_value,
        i.tx_id_size,
        i.tx_id_indicator == -1);
    }

    // tx_type
    //
    {
      ::uint16_t& v =
        o.tx_type;

      oracle::value_traits<
          ::uint16_t,
          oracle::id_int32 >::set_value (
        v,
        i.tx_type_value,
        i.tx_type_indicator == -1);
    }

    // hypertag_id
    //
    {
      ::uint64_t& v =
        o.hypertag_id;

      oracle::value_traits<
          ::uint64_t,
          oracle::id_big_int >::set_value (
        v,
        i.hypertag_id_value,
        i.hypertag_id_size,
        i.hypertag_id_indicator == -1);
    }

    // bank_code
    //
    {
      ::uint32_t& v =
        o.bank_code;

      oracle::value_traits<
          ::uint32_t,
          oracle::id_int32 >::set_value (
        v,
        i.bank_code_value,
        i.bank_code_indicator == -1);
    }

    // cif_id
    //
    {
      ::uint64_t& v =
        o.cif_id;

      oracle::value_traits<
          ::uint64_t,
          oracle::id_big_int >::set_value (
        v,
        i.cif_id_value,
        i.cif_id_size,
        i.cif_id_indicator == -1);
    }

    // acc_id
    //
    {
      ::std::string& v =
        o.acc_id;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.acc_id_value,
        i.acc_id_size,
        i.acc_id_indicator == -1);
    }

    // acc_type
    //
    {
      ::uint8_t& v =
        o.acc_type;

      oracle::value_traits<
          ::uint8_t,
          oracle::id_int32 >::set_value (
        v,
        i.acc_type_value,
        i.acc_type_indicator == -1);
    }

    // net_operator
    //
    {
      ::std::string& v =
        o.net_operator;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.net_operator_value,
        i.net_operator_size,
        i.net_operator_indicator == -1);
    }

    // phone
    //
    {
      ::uint64_t& v =
        o.phone;

      oracle::value_traits<
          ::uint64_t,
          oracle::id_big_int >::set_value (
        v,
        i.phone_value,
        i.phone_size,
        i.phone_indicator == -1);
    }

    // home_currency
    //
    {
      ::uint16_t& v =
        o.home_currency;

      oracle::value_traits<
          ::uint16_t,
          oracle::id_int32 >::set_value (
        v,
        i.home_currency_value,
        i.home_currency_indicator == -1);
    }

    // home_country
    //
    {
      ::std::string& v =
        o.home_country;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.home_country_value,
        i.home_country_size,
        i.home_country_indicator == -1);
    }

    // home_province
    //
    {
      ::std::string& v =
        o.home_province;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.home_province_value,
        i.home_province_size,
        i.home_province_indicator == -1);
    }

    // home_region
    //
    {
      ::std::string& v =
        o.home_region;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.home_region_value,
        i.home_region_size,
        i.home_region_indicator == -1);
    }

    // home_city
    //
    {
      ::std::string& v =
        o.home_city;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.home_city_value,
        i.home_city_size,
        i.home_city_indicator == -1);
    }

    // home_township
    //
    {
      ::std::string& v =
        o.home_township;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.home_township_value,
        i.home_township_size,
        i.home_township_indicator == -1);
    }

    // date_birth
    //
    {
      ::std::string& v =
        o.date_birth;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.date_birth_value,
        i.date_birth_size,
        i.date_birth_indicator == -1);
    }

    // id_type
    //
    {
      ::uint8_t& v =
        o.id_type;

      oracle::value_traits<
          ::uint8_t,
          oracle::id_int32 >::set_value (
        v,
        i.id_type_value,
        i.id_type_indicator == -1);
    }

    // id_no
    //
    {
      ::std::string& v =
        o.id_no;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.id_no_value,
        i.id_no_size,
        i.id_no_indicator == -1);
    }

    // gender
    //
    {
      ::std::string& v =
        o.gender;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.gender_value,
        i.gender_size,
        i.gender_indicator == -1);
    }

    // occupation
    //
    {
      ::uint8_t& v =
        o.occupation;

      oracle::value_traits<
          ::uint8_t,
          oracle::id_int32 >::set_value (
        v,
        i.occupation_value,
        i.occupation_indicator == -1);
    }

    // home_branch
    //
    {
      ::std::string& v =
        o.home_branch;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.home_branch_value,
        i.home_branch_size,
        i.home_branch_indicator == -1);
    }

    // service_plan
    //
    {
      ::std::string& v =
        o.service_plan;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.service_plan_value,
        i.service_plan_size,
        i.service_plan_indicator == -1);
    }

    // signup_loc
    //
    {
      ::std::string& v =
        o.signup_loc;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.signup_loc_value,
        i.signup_loc_size,
        i.signup_loc_indicator == -1);
    }

    // signup_date
    //
    {
      ::std::string& v =
        o.signup_date;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.signup_date_value,
        i.signup_date_size,
        i.signup_date_indicator == -1);
    }

    // agent_code
    //
    {
      ::std::string& v =
        o.agent_code;

      oracle::value_traits<
          ::std::string,
          oracle::id_string >::set_value (
        v,
        i.agent_code_value,
        i.agent_code_size,
        i.agent_code_indicator == -1);
    }

    // initial_deposit
    //
    {
      ::uint64_t& v =
        o.initial_deposit;

      oracle::value_traits<
          ::uint64_t,
          oracle::id_big_int >::set_value (
        v,
        i.initial_deposit_value,
        i.initial_deposit_size,
        i.initial_deposit_indicator == -1);
    }
  }

  const char access::object_traits_impl< ::ns2__reg_customer_obj, id_oracle >::persist_statement[] =
  "INSERT INTO \"ns2__reg_customer_obj\" "
  "(\"tx_id\", "
  "\"tx_type\", "
  "\"hypertag_id\", "
  "\"bank_code\", "
  "\"cif_id\", "
  "\"acc_id\", "
  "\"acc_type\", "
  "\"net_operator\", "
  "\"phone\", "
  "\"home_currency\", "
  "\"home_country\", "
  "\"home_province\", "
  "\"home_region\", "
  "\"home_city\", "
  "\"home_township\", "
  "\"date_birth\", "
  "\"id_type\", "
  "\"id_no\", "
  "\"gender\", "
  "\"occupation\", "
  "\"home_branch\", "
  "\"service_plan\", "
  "\"signup_loc\", "
  "\"signup_date\", "
  "\"agent_code\", "
  "\"initial_deposit\") "
  "VALUES "
  "(:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13, :14, :15, :16, :17, :18, :19, :20, :21, :22, :23, :24, :25, :26)";

  const char access::object_traits_impl< ::ns2__reg_customer_obj, id_oracle >::query_statement[] =
  "SELECT "
  "\"ns2__reg_customer_obj\".\"tx_id\", "
  "\"ns2__reg_customer_obj\".\"tx_type\", "
  "\"ns2__reg_customer_obj\".\"hypertag_id\", "
  "\"ns2__reg_customer_obj\".\"bank_code\", "
  "\"ns2__reg_customer_obj\".\"cif_id\", "
  "\"ns2__reg_customer_obj\".\"acc_id\", "
  "\"ns2__reg_customer_obj\".\"acc_type\", "
  "\"ns2__reg_customer_obj\".\"net_operator\", "
  "\"ns2__reg_customer_obj\".\"phone\", "
  "\"ns2__reg_customer_obj\".\"home_currency\", "
  "\"ns2__reg_customer_obj\".\"home_country\", "
  "\"ns2__reg_customer_obj\".\"home_province\", "
  "\"ns2__reg_customer_obj\".\"home_region\", "
  "\"ns2__reg_customer_obj\".\"home_city\", "
  "\"ns2__reg_customer_obj\".\"home_township\", "
  "\"ns2__reg_customer_obj\".\"date_birth\", "
  "\"ns2__reg_customer_obj\".\"id_type\", "
  "\"ns2__reg_customer_obj\".\"id_no\", "
  "\"ns2__reg_customer_obj\".\"gender\", "
  "\"ns2__reg_customer_obj\".\"occupation\", "
  "\"ns2__reg_customer_obj\".\"home_branch\", "
  "\"ns2__reg_customer_obj\".\"service_plan\", "
  "\"ns2__reg_customer_obj\".\"signup_loc\", "
  "\"ns2__reg_customer_obj\".\"signup_date\", "
  "\"ns2__reg_customer_obj\".\"agent_code\", "
  "\"ns2__reg_customer_obj\".\"initial_deposit\" "
  "FROM \"ns2__reg_customer_obj\"";

  const char access::object_traits_impl< ::ns2__reg_customer_obj, id_oracle >::erase_query_statement[] =
  "DELETE FROM \"ns2__reg_customer_obj\"";

  const char access::object_traits_impl< ::ns2__reg_customer_obj, id_oracle >::table_name[] =
  "\"ns2__reg_customer_obj\"";

  void access::object_traits_impl< ::ns2__reg_customer_obj, id_oracle >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace oracle;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    init (im, obj, statement_insert);

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  result< access::object_traits_impl< ::ns2__reg_customer_obj, id_oracle >::object_type >
  access::object_traits_impl< ::ns2__reg_customer_obj, id_oracle >::
  query (database&, const query_base_type& q)
  {
    using namespace oracle;
    using odb::details::shared;
    using odb::details::shared_ptr;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::no_id_object_result_impl<object_type> > r (
      new (shared) oracle::no_id_object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::ns2__reg_customer_obj, id_oracle >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace oracle;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }
}

#include <odb/post.hxx>
