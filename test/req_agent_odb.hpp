// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef REQ_AGENT_ODB_HPP
#define REQ_AGENT_ODB_HPP

// Begin prologue.
//
#include <type_traits/std_chrono.hpp>
#include <cstddef>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "req_agent.hpp"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/no-id-object-result.hxx>
#include <odb/view-image.hxx>
#include <odb/view-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // ns2__reg_agent_obj
  //
  template <>
  struct class_traits< ::ns2__reg_agent_obj >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ns2__reg_agent_obj >
  {
    public:
    typedef ::ns2__reg_agent_obj object_type;
    typedef ::ns2__reg_agent_obj* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef void id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_id_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_id_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // ns2__reg_customer_obj
  //
  template <>
  struct class_traits< ::ns2__reg_customer_obj >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::ns2__reg_customer_obj >
  {
    public:
    typedef ::ns2__reg_customer_obj object_type;
    typedef ::ns2__reg_customer_obj* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef void id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_id_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_id_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // count_reg_agent
  //
  template <>
  struct class_traits< ::count_reg_agent >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::count_reg_agent >
  {
    public:
    typedef ::count_reg_agent view_type;
    typedef ::count_reg_agent* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/oracle/version.hxx>
#include <odb/oracle/forward.hxx>
#include <odb/oracle/binding.hxx>
#include <odb/oracle/oracle-types.hxx>
#include <odb/oracle/query.hxx>

namespace odb
{
  // ns2__reg_agent_obj
  //
  template <typename A>
  struct query_columns< ::ns2__reg_agent_obj, id_oracle, A >
  {
    // tx_id
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::uint64_t,
        oracle::id_big_int >::query_type,
      oracle::id_big_int >
    tx_id_type_;

    static const tx_id_type_ tx_id;

    // tx_type
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::uint16_t,
        oracle::id_int32 >::query_type,
      oracle::id_int32 >
    tx_type_type_;

    static const tx_type_type_ tx_type;

    // hypertag_id
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::uint64_t,
        oracle::id_big_int >::query_type,
      oracle::id_big_int >
    hypertag_id_type_;

    static const hypertag_id_type_ hypertag_id;

    // bank_code
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::uint32_t,
        oracle::id_int32 >::query_type,
      oracle::id_int32 >
    bank_code_type_;

    static const bank_code_type_ bank_code;

    // agent_code
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::std::string,
        oracle::id_string >::query_type,
      oracle::id_string >
    agent_code_type_;

    static const agent_code_type_ agent_code;

    // cif_id
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::uint64_t,
        oracle::id_big_int >::query_type,
      oracle::id_big_int >
    cif_id_type_;

    static const cif_id_type_ cif_id;

    // acc_id
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::std::string,
        oracle::id_string >::query_type,
      oracle::id_string >
    acc_id_type_;

    static const acc_id_type_ acc_id;

    // acc_type
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::uint8_t,
        oracle::id_int32 >::query_type,
      oracle::id_int32 >
    acc_type_type_;

    static const acc_type_type_ acc_type;

    // net_operator
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::std::string,
        oracle::id_string >::query_type,
      oracle::id_string >
    net_operator_type_;

    static const net_operator_type_ net_operator;
  };

  template <typename A>
  const typename query_columns< ::ns2__reg_agent_obj, id_oracle, A >::tx_id_type_
  query_columns< ::ns2__reg_agent_obj, id_oracle, A >::
  tx_id (A::table_name, "\"tx_id\"", 0, 20);

  template <typename A>
  const typename query_columns< ::ns2__reg_agent_obj, id_oracle, A >::tx_type_type_
  query_columns< ::ns2__reg_agent_obj, id_oracle, A >::
  tx_type (A::table_name, "\"tx_type\"", 0, 5);

  template <typename A>
  const typename query_columns< ::ns2__reg_agent_obj, id_oracle, A >::hypertag_id_type_
  query_columns< ::ns2__reg_agent_obj, id_oracle, A >::
  hypertag_id (A::table_name, "\"hypertag_id\"", 0, 20);

  template <typename A>
  const typename query_columns< ::ns2__reg_agent_obj, id_oracle, A >::bank_code_type_
  query_columns< ::ns2__reg_agent_obj, id_oracle, A >::
  bank_code (A::table_name, "\"bank_code\"", 0, 10);

  template <typename A>
  const typename query_columns< ::ns2__reg_agent_obj, id_oracle, A >::agent_code_type_
  query_columns< ::ns2__reg_agent_obj, id_oracle, A >::
  agent_code (A::table_name, "\"agent_code\"", 0, 512);

  template <typename A>
  const typename query_columns< ::ns2__reg_agent_obj, id_oracle, A >::cif_id_type_
  query_columns< ::ns2__reg_agent_obj, id_oracle, A >::
  cif_id (A::table_name, "\"cif_id\"", 0, 20);

  template <typename A>
  const typename query_columns< ::ns2__reg_agent_obj, id_oracle, A >::acc_id_type_
  query_columns< ::ns2__reg_agent_obj, id_oracle, A >::
  acc_id (A::table_name, "\"acc_id\"", 0, 512);

  template <typename A>
  const typename query_columns< ::ns2__reg_agent_obj, id_oracle, A >::acc_type_type_
  query_columns< ::ns2__reg_agent_obj, id_oracle, A >::
  acc_type (A::table_name, "\"acc_type\"", 0, 3);

  template <typename A>
  const typename query_columns< ::ns2__reg_agent_obj, id_oracle, A >::net_operator_type_
  query_columns< ::ns2__reg_agent_obj, id_oracle, A >::
  net_operator (A::table_name, "\"net_operator\"", 0, 512);

  template <typename A>
  struct pointer_query_columns< ::ns2__reg_agent_obj, id_oracle, A >:
    query_columns< ::ns2__reg_agent_obj, id_oracle, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ns2__reg_agent_obj, id_oracle >:
    public access::object_traits< ::ns2__reg_agent_obj >
  {
    public:
    static const std::size_t batch = 1UL;

    struct image_type
    {
      // tx_id
      //
      char tx_id_value[12];
      ub2 tx_id_size;
      sb2 tx_id_indicator;

      // tx_type
      //
      unsigned int tx_type_value;
      sb2 tx_type_indicator;

      // hypertag_id
      //
      char hypertag_id_value[12];
      ub2 hypertag_id_size;
      sb2 hypertag_id_indicator;

      // bank_code
      //
      unsigned int bank_code_value;
      sb2 bank_code_indicator;

      // agent_code
      //
      char agent_code_value[512];
      ub2 agent_code_size;
      sb2 agent_code_indicator;

      // cif_id
      //
      char cif_id_value[12];
      ub2 cif_id_size;
      sb2 cif_id_indicator;

      // acc_id
      //
      char acc_id_value[512];
      ub2 acc_id_size;
      sb2 acc_id_indicator;

      // acc_type
      //
      unsigned int acc_type_value;
      sb2 acc_type_indicator;

      // net_operator
      //
      char net_operator_value[512];
      ub2 net_operator_size;
      sb2 net_operator_indicator;

      std::size_t version;

      oracle::change_callback change_callback_;

      oracle::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    using object_traits<object_type>::id;

    static void
    bind (oracle::bind*,
          image_type&,
          oracle::statement_kind);

    static void
    init (image_type&,
          const object_type&,
          oracle::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    typedef oracle::no_id_object_statements<object_type> statements_type;

    typedef oracle::query_base query_base_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 0UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
  };

  template <>
  class access::object_traits_impl< ::ns2__reg_agent_obj, id_common >:
    public access::object_traits_impl< ::ns2__reg_agent_obj, id_oracle >
  {
  };

  // ns2__reg_customer_obj
  //
  template <typename A>
  struct query_columns< ::ns2__reg_customer_obj, id_oracle, A >
  {
    // tx_id
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::uint64_t,
        oracle::id_big_int >::query_type,
      oracle::id_big_int >
    tx_id_type_;

    static const tx_id_type_ tx_id;

    // tx_type
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::uint16_t,
        oracle::id_int32 >::query_type,
      oracle::id_int32 >
    tx_type_type_;

    static const tx_type_type_ tx_type;

    // hypertag_id
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::uint64_t,
        oracle::id_big_int >::query_type,
      oracle::id_big_int >
    hypertag_id_type_;

    static const hypertag_id_type_ hypertag_id;

    // signup_date
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::std::string,
        oracle::id_string >::query_type,
      oracle::id_string >
    signup_date_type_;

    static const signup_date_type_ signup_date;

    // agent_code
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::std::string,
        oracle::id_string >::query_type,
      oracle::id_string >
    agent_code_type_;

    static const agent_code_type_ agent_code;

    // initial_deposit
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::uint64_t,
        oracle::id_big_int >::query_type,
      oracle::id_big_int >
    initial_deposit_type_;

    static const initial_deposit_type_ initial_deposit;
  };

  template <typename A>
  const typename query_columns< ::ns2__reg_customer_obj, id_oracle, A >::tx_id_type_
  query_columns< ::ns2__reg_customer_obj, id_oracle, A >::
  tx_id (A::table_name, "\"tx_id\"", 0, 20);

  template <typename A>
  const typename query_columns< ::ns2__reg_customer_obj, id_oracle, A >::tx_type_type_
  query_columns< ::ns2__reg_customer_obj, id_oracle, A >::
  tx_type (A::table_name, "\"tx_type\"", 0, 5);

  template <typename A>
  const typename query_columns< ::ns2__reg_customer_obj, id_oracle, A >::hypertag_id_type_
  query_columns< ::ns2__reg_customer_obj, id_oracle, A >::
  hypertag_id (A::table_name, "\"hypertag_id\"", 0, 20);

  template <typename A>
  const typename query_columns< ::ns2__reg_customer_obj, id_oracle, A >::signup_date_type_
  query_columns< ::ns2__reg_customer_obj, id_oracle, A >::
  signup_date (A::table_name, "\"signup_date\"", 0, 512);

  template <typename A>
  const typename query_columns< ::ns2__reg_customer_obj, id_oracle, A >::agent_code_type_
  query_columns< ::ns2__reg_customer_obj, id_oracle, A >::
  agent_code (A::table_name, "\"agent_code\"", 0, 512);

  template <typename A>
  const typename query_columns< ::ns2__reg_customer_obj, id_oracle, A >::initial_deposit_type_
  query_columns< ::ns2__reg_customer_obj, id_oracle, A >::
  initial_deposit (A::table_name, "\"initial_deposit\"", 0, 20);

  template <typename A>
  struct pointer_query_columns< ::ns2__reg_customer_obj, id_oracle, A >:
    query_columns< ::ns2__reg_customer_obj, id_oracle, A >
  {
  };

  template <>
  class access::object_traits_impl< ::ns2__reg_customer_obj, id_oracle >:
    public access::object_traits< ::ns2__reg_customer_obj >
  {
    public:
    static const std::size_t batch = 1UL;

    struct image_type
    {
      // tx_id
      //
      char tx_id_value[12];
      ub2 tx_id_size;
      sb2 tx_id_indicator;

      // tx_type
      //
      unsigned int tx_type_value;
      sb2 tx_type_indicator;

      // hypertag_id
      //
      char hypertag_id_value[12];
      ub2 hypertag_id_size;
      sb2 hypertag_id_indicator;

      // signup_date
      //
      char signup_date_value[512];
      ub2 signup_date_size;
      sb2 signup_date_indicator;

      // agent_code
      //
      char agent_code_value[512];
      ub2 agent_code_size;
      sb2 agent_code_indicator;

      // initial_deposit
      //
      char initial_deposit_value[12];
      ub2 initial_deposit_size;
      sb2 initial_deposit_indicator;

      std::size_t version;

      oracle::change_callback change_callback_;

      oracle::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    using object_traits<object_type>::id;

    static void
    bind (oracle::bind*,
          image_type&,
          oracle::statement_kind);

    static void
    init (image_type&,
          const object_type&,
          oracle::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    typedef oracle::no_id_object_statements<object_type> statements_type;

    typedef oracle::query_base query_base_type;

    static const std::size_t column_count = 6UL;
    static const std::size_t id_column_count = 0UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
  };

  template <>
  class access::object_traits_impl< ::ns2__reg_customer_obj, id_common >:
    public access::object_traits_impl< ::ns2__reg_customer_obj, id_oracle >
  {
  };

  // count_reg_agent
  //
  template <>
  class access::view_traits_impl< ::count_reg_agent, id_oracle >:
    public access::view_traits< ::count_reg_agent >
  {
    public:
    struct image_type
    {
      // cnt
      //
      double cnt_value;
      sb2 cnt_indicator;

      std::size_t version;

      oracle::change_callback change_callback_;

      oracle::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    typedef oracle::view_statements<view_type> statements_type;

    typedef oracle::query_base query_base_type;
    struct query_columns
    {
    };

    static const bool versioned = false;

    static void
    bind (oracle::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::count_reg_agent, id_common >:
    public access::view_traits_impl< ::count_reg_agent, id_oracle >
  {
  };

  // ns2__reg_agent_obj
  //
  // ns2__reg_customer_obj
  //
}

#include "req_agent_odb_inline.hpp"

#include <odb/post.hxx>

#endif // REQ_AGENT_ODB_HPP
